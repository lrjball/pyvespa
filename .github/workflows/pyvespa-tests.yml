name: pyvespa - Tests - Except Cloud

on:
  workflow_dispatch:
  push:
    branches:
      - thomasht86/tests-to-github-action

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pandoc
        run: |
          wget https://github.com/jgm/pandoc/releases/download/3.2/pandoc-3.2-1-amd64.deb
          sudo dpkg -i pandoc-3.2-1-amd64.deb
          sudo apt-get install -f -y
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip" # caching pip dependencies
      - name: Set up uv
        run: |
          pip install uv
          uv venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]" -r docs/sphinx/source/requirements.txt -r docs/sphinx/source/notebook_requirements.txt
      - name: Run doc linkcheck
        run: |
          sphinx-build -E -D exclude_patterns=getting-started-pyvespa-cloud.ipynb -b linkcheck docs/sphinx/source docs/sphinx/build
          sphinx-build -E -D exclude_patterns=getting-started-pyvespa-cloud.ipynb docs/sphinx/source docs/sphinx/build
          rm -fr docs/sphinx/build
      - name: Run doc tests
        run: |
          pytest vespa --doctest-modules
      - name: Run unit tests
        run: |
          pytest tests/unit
  integration-except-cloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip" # caching pip dependencies
      - name: Install dependencies
        run: pip install -e .[dev]
      - name: |
          Run integration tests
        run: |
          pytest tests/integration/test_integration_docker.py -s -v
  get-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.set_output.outputs.notebooks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set output variable (Make sure it is this quote format - '["path/to/notebook1.ipynb", "path/to/notebook2.ipynb"]')
        id: set_output
        run: |
          echo notebooks=$(find docs -name '*.ipynb' ! -name '*cloud*.ipynb' | jq -R -s -c 'split("\n")[:-1]') >> $GITHUB_OUTPUT

  notebooks-except-cloud:
    runs-on: ubuntu-latest
    needs: get-notebooks
    strategy:
      max-parallel: 8
      matrix:
        notebook: ${{fromJson(needs.get-notebooks.outputs.notebooks)}}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip" # caching pip dependencies
      - name: Set up uv
        run: |
          pip install uv
          uv venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]" -r docs/sphinx/source/requirements.txt -r docs/sphinx/source/notebook_requirements.txt

      - name: Run notebooks tests
        run: |
          echo "Running ${{ matrix.notebook }}"
          echo "Converting to .py"
          jupytext --to py ${{ matrix.notebook }}
          echo "Running converted script"
          python ${${{ matrix.notebook }}%.ipynb}.py
